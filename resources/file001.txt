all the transformation operations operate on the transformation worldtransform(). a matrix transforms a point in the plane to another point. for more information about the transformation matrix, see the coordinate system and qtransform documentation.
the setworldtransform() function can replace or add to the currently set worldtransform(). the resettransform() function resets any transformations that were made using translate(), scale(), shear(), rotate(), setworldtransform(), setviewport() and setwindow() functions. the devicetransform() returns the matrix that transforms from logical coordinates to device coordinates of the platform dependent paint device. the latter function is only needed when using platform painting commands on the platform dependent handle, and the platform does not do transformations nativly.
when drawing with qpainter, we specify points using logical coordinates which then are converted into the physical coordinates of the paint device. the mapping of the logical coordinates to the physical coordinates are handled by qpainter's combinedtransform(), a combination of viewport() and window() and worldtransform(). the viewport() represents the physical coordinates specifying an arbitrary rectangle, the window() describes the same rectangle in logical coordinates, and the worldtransform() is identical with the transformation matrix.
see also coordinate system clipping
qpainter can clip any drawing operation to a rectangle, a region, or a vector path. the current clip is available using the functions clipregion() and clippath(). whether paths or regions are preferred (faster) depends on the underlying paintengine(). for example, the qimage paint engine prefers paths while the x11 paint engine prefers regions. setting a clip is done in the painters logical coordinates.
after qpainter's clipping, the paint device may also clip. for example, most widgets clip away the pixels used by child widgets, and most printers clip away an area near the edges of the paper. this additional clipping is not reflected by the return value of clipregion() or hasclipping().
composition modes
qpainter provides the compositionmode enum which defines the porter-duff rules for digital image compositing; it describes a model for combining the pixels in one image, the source, with the pixels in another image, the destination.
the two most common forms of composition are source and sourceover. source is used to draw opaque objects onto a paint device. in this mode, each pixel in the source replaces the corresponding pixel in the destination. in sourceover composition mode, the source object is transparent and is drawn on top of the destination.
note that composition transformation operates pixelwise. for that reason, there is a difference between using the graphic primitive itself and its bounding rectangle: the bounding rect contains pixels with alpha == 0 (i.e the pixels surrounding the primitive). these pixels will overwrite the other image's pixels, effectively clearing those, while the primitive only overwrites its own area.
