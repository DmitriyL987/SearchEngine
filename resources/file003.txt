detailed description
the class serves as a container for qgraphicsitems. it is used together with qgraphicsview for visualizing graphical items, such as lines, rectangles, text, or even custom items, on a 2d surface. qgraphicsscene is part of the graphics view framework.
qgraphicsscene also provides functionality that lets you efficiently determine both the location of items, and for determining what items are visible within an arbitrary area on the scene. with the qgraphicsview widget, you can either visualize the whole scene, or zoom in and view only parts of the scene.
note that qgraphicsscene has no visual appearance of its own; it only manages the items. you need to create a qgraphicsview widget to visualize the scene.
to add items to a scene, you start off by constructing a qgraphicsscene object. then, you have two options: either add your existing qgraphicsitem objects by calling additem(), or you can call one of the convenience functions addellipse(), addline(), addpath(), addpixmap(), addpolygon(), addrect(), or addtext(), which all return a pointer to the newly added item. the dimensions of the items added with these functions are relative to the item's coordinate system, and the items position is initialized to (0, 0) in the scene.
you can then visualize the scene using qgraphicsview. when the scene changes, (e.g., when an item moves or is transformed) qgraphicsscene emits the changed() signal. to remove an item, call removeitem().
qgraphicsscene uses an indexing algorithm to manage the location of items efficiently. by default, a bsp (binary space partitioning) tree is used; an algorithm suitable for large scenes where most items remain static (i.e., do not move around). you can choose to disable this index by calling setitemindexmethod(). for more information about the available indexing algorithms, see the itemindexmethod property.
the scene's bounding rect is set by calling setscenerect(). items can be placed at any position on the scene, and the size of the scene is by default unlimited. the scene rect is used only for internal bookkeeping, maintaining the scene's item index. if the scene rect is unset, qgraphicsscene will use the bounding area of all items, as returned by itemsboundingrect(), as the scene rect. however, itemsboundingrect() is a relatively time consuming function, as it operates by collecting positional information for every item on the scene. because of this, you should always set the scene rect when operating on large scenes.
one of qgraphicsscene's greatest strengths is its ability to efficiently determine the location of items. even with millions of items on the scene, the items() functions can determine the location of an item within a few milliseconds. there are several overloads to items(): one that finds items at a certain position, one that finds items inside or intersecting with a polygon or a rectangle, and more. the list of returned items is sorted by stacking order, with the topmost item being the first item in the list. for convenience, there is also an itemat() function that returns the topmost item at a given position.
qgraphicsscene maintains selection information for the scene. to select items, call setselectionarea(), and to clear the current selection, call clearselection(). call selecteditems() to get the list of all selected items.
